@page "/pumpstatus"
@using BachelorApp.Interfaces;
@using BachelorApp.Services;
@using System.Diagnostics;
@inject IBachelorPageModel model;
@inject IReadingService service;

<h3>Pump Status</h3>
<br>
<div class="row">
    <div id="displayStatus" class="col-12 h-50">
        <p>
            @response
        </p>
    </div>
</div>
<div class="row w-100"><div class="col h-25"></div></div>
    <div class="row no-gutters">
<!--P1 Start Quantity-->
        <div class="col col-lg-3 col-6">
            <p>P1 Start Quantity</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="p1Start" />
        </div>

<!--P1 Operating Time-->
        <div class="col col-lg-3 col-6">
            <p>P1 Operating Time</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="p1OperTime" />
        </div>

<!--P2 Start Quantity-->
        <div class="col col-lg-3 col-6">
            <p>P2 Start Quantity</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="p2Start" />
        </div>

<!--P2 Operating Time-->
        <div class="col col-lg-3 col-6">
            <p>P2 Operating Time</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="p2OperTime" />
        </div>

<!--Rain(mm)-->
        <div class="col col-lg-3 col-6">
            <p>Rain(mm)</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="rain" />
        </div>

<!--Niveau(cm)-->
        <div class="col col-lg-3 col-6">
            <p>Niveau(cm)</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="niveau" />
        </div>

<!--Month-->
        <div class="col col-lg-3 col-6">
            <p>Month</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="month" />
        </div>

<!--Day-->
        <div class="col col-lg-3 col-6">
            <p>Day</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="day" />
        </div>

<!--Hour-->
        <div class="col col-lg-3 col-6">
            <p>Hour</p>
        </div>
        <div class="col col-lg-9 col-6">
            <input @bind="hour" />
        </div>
    </div>

<br>
<button type="button" class="btn btn-primary" @onclick="Request">Update List</button>

@code {
    //Object to send to the python module, same object will be saved with updated values to the database
    private Reading reading;
    private float p1Start = 1, p1OperTime = 3, p2Start = 2, p2OperTime = 4, niveau = 6, rain = 5;
    private int month = 7, day = 8, hour = 9;

    //Response received from the python module (json string)
    private String response;
    //Prediction label (Abnormal,Normal)
    private String label;
    //Probability of given label being true (float)
    private float probability;

    //A timer to time the duration of a request
    private Stopwatch stopWatch = new Stopwatch();

    async Task Request()
    {
        //On request assing the input values to the object
        reading = new Reading();
        reading.P1StartQuantity = p1Start;
        reading.P1OperatingTime = p1OperTime;
        reading.P2StartQuantity = p2Start;
        reading.P2OperatingTime = p2OperTime;
        reading.Rain = rain;
        reading.Niveau = niveau;
        reading.month = month;
        reading.day = day;
        reading.hour = hour;

        stopWatch.Start();
        //Response gets updated automatically on the page, when the request is finished
        response = await model.PutReadingItemAsync(reading);
        stopWatch.Stop();

        //Spliting label and probability after receiving the response
        SplitLabelAndProbability();
        await service.AddReading(reading);

        //Display time it took for the request to finish
        response = "Time of request in seconds: " + stopWatch.Elapsed.TotalSeconds;
    }

    //Splitting the response string into a string label and float probability :.4f
    void SplitLabelAndProbability()
    {
        int position = response.IndexOf("[\"");
        int position1 = response.IndexOf(",");
        int position2 = response.IndexOf(" ");
        var label = response.Substring(position + 2, position1 - position - 2);
        var proba = response.Substring(position1 - position + 2, 6);
        var proba2 = response.Substring(position2 + 1, 6);

        float value = float.Parse(proba);
        float value1 = float.Parse(proba2);
        float probability = 0;
        if (value < value1)
            probability = value1;
        else
            probability = value;
        //Add prediction to the reading object before saving into database
        reading.label = label;
        reading.probability = probability;
    }
}
